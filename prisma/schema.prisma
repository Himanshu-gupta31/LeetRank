// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  clerkId       String?  @unique
  username      String?  @unique
  email         String?  @unique
  clerkusername String?  
  collegeId     String?
  college       College? @relation(fields: [collegeId], references: [id])

  Ranking     Ranking[]
  RoomMember  RoomMember[]
  createdRoom CustomRoom[]  @relation("RoomAdmin")
}

model Ranking {
  id        String  @id @default(cuid())
  username  String
  collegeId String // to save ranking data for each college 
  score     Int? // this will be the score calculate by the leetcoderank api and will be stored here
  user      User    @relation(fields: [username], references: [username])
  college   College @relation(fields: [collegeId], references: [id])

  @@unique([username, collegeId])
  @@index([collegeId, score(sort: Desc)]) // for faster querying at db level
}

model College {
  id      String  @id @default(cuid())
  name    String  @unique
  slug    String? @unique
  area    String
  state   String
  country String

  users    User[]
  rankings Ranking[]
}

model CustomRoom {
  id          String       @id @default(uuid())
  name        String       @unique
  description String?
  slug        String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  creatorId   String       @unique // reference the userId of the user who created this
  creator     User         @relation("RoomAdmin", fields: [creatorId], references: [id])
  members     RoomMember[]
}

model RoomMember {
  id       String     @id @default(uuid())
  roomId   String
  userId   String
  joinedAt DateTime   @default(now())
  room     CustomRoom @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
  @@index([roomId])
}
